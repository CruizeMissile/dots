#!/bin/bash

function die() 
{
     exit $1
}

function usage()
{
    echo "install script for dot file
options:
  -p, --proxy    Proxy to use
  -f, --force    Force install dots

  -h, --help     Print this usage
  -v, --verbose  Set verbose mode
"
    die $1
}

function parse_arguments()
{
    parse_args=()
    local optspec=":p:hvf-"
    while [ $# -gt 0 ] ; do
        unset OPTIND && unset OPTARG
        while getopts $optspec OPTION ; do
            case "$OPTION" in
                h) usage 0 ;;
                v) inst_verbose=true ;;
                p) inst_proxy="$OPTARG" ;;
                f) inst_force_install=true ;;
                -)
                    [ $OPTIND -ge 1 ] && optind=$(expr $OPTIND - 1) || optind=$OPTIND
                    eval OPTION="\$$optind"
                    OPTARG=$(echo $OPTION | cut -d'=' -f2)
                    OPTION=$(echo $OPTION | cut -d'=' -f1)
                    case $OPTION in
                        --help|--usage) usage 0 ;;
                        --verbose) inst_verbose=true ;;
                        --proxy) inst_proxy="$OPTARG" ;;
                        --force) inst_force_install=true ;;
                        *) echo "Invalid option: $OPTION $OPTARG" ;;
                    esac
                    OPTIND=1 && shift ;;
                \?) echo "Invalid option: $OPTION $OPTARG" ;;
            esac
        done
        shift $((OPTIND-1)) && parse_args+=($1) && shift
    done
}

function main()
{
    parse_arguments "$@"

    work_dir="$HOME"
    dots_dir="$HOME/.dots"
    temp_dir="$HOME/tmp/dots"
    url_link="https://github.com/CruizeMissile/dots"
    dots_cmd="git --git-dir=$dots_dir --work-tree=$work_dir"
    backup_dir="$HOME/.dots-backup"

    (
        cd $work_dir

        [[ -d $dots_dir ]] && {
            echo ".dots folder already exists!"
            [ "$inst_force_install" = "true" ] && echo "Force installing dots" && echo rm -rf $dots_dir
            [ "$inst_force_install" = "true" ] || exit 1
        }

        # If there is a proxy then configure the clone to use the proxy
        [[ -n $inst_proxy ]] && inst_proxy_cmd="--config http.proxy=$inst_proxy --config https.proxy=$inst_proxy"

        # Clone the dots repo
        $dots_cmd clone $inst_proxy_cmd --bare $url_link $dots_dir

        backup_files=($($dots_cmd checkout 2>&1 | egrep "\s+\." | awk {'print $1'}))
        [[ ${#backup_files[@]} -gt 0 ]] && {
            mkdir -p $backup_dir
            local d=''
            for f in ${backup_files[@]} ; do
                d="$backup_dir/$(dirname $f)"
                mkdir -p $d
                echo "Backing up: $f to $backup_dir/$f"
                mv $f $backup_dir/$f
            done
        }

        # Update submodules
        [[ -n $inst_proxy ]] && {
            git config --global http.proxy $inst_proxy
            git config --global https.proxy $inst_proxy
        }

        $dots_cmd submodule update --init --recursive $work_dir

        [[ -n $inst_proxy ]] && {
            $dots_cmd submodule foreach --recursive "git config http.proxy $inst_proxy && git config https.proxy $inst_proxy" | awk '{print $2}' | xargs -I{} echo "Setting proxy $inst_proxy for {}"
            $dots_cmd checkout $HOME/.gitconfig
        }
    )

    # bye bye
    die 0
}

main "$@"

