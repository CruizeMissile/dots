#!/usr/bin/env bash

function usage()
{
    cat << 'EOF'
Test output color codes for your terminal.
Usage: color [OPTIONS] [mode]

Mode:
  blocks  - Output colors in block output
  dots    - Output colors as dots
  panes   - Output colors as pane

Options:
  -c, --colors [bits]  Force the color bits that it will output (8, 16, 256)
  -f, --forground      Only output forground colors
  -b, --background     Only output background colors
EOF
    exit $1
}
function parse_arguments()
{
    forground_only=0
    background_only=0
    local accepted_values=(8, 16, 256)
    pos_args=()
    local optspec=":c:fb-"
    while [ $# -gt 0 ] ; do
        unset OPTIND ; unset OPTARG
        while getopts $optspec OPTION ; do
            case "$OPTION" in
                h) usage 0 ;;
                f) forground_only=1 ;;
                b) background_only=1 ;;
                c)
                    [[ ! "${accepted_values[@]}" =~ "$OPTARG" ]] && echo "unknown value $OPTARG" && exit 1
                    force_color_mode="$OPTARG" ;;
                -)
                    [ $OPTIND -ge 1 ] && optind=$(expr $OPTIND - 1) || optind=$OPTIND
                    eval OPTION="\$$optind"
                    OPTARG=$(echo $OPTION | cut -d'=' -f2)
                    OPTION=$(echo $OPTION | cut -d'=' -f1)
                    case $OPTION in
                        --help|--usage) usage 0 ;;
                        --forground) forground_only=1 ;;
                        --background) background_only=1 ;;
                        --colors)
                            [[ ! "${accepted_values[@]}" =~ "$OPTARG" ]] && echo "unknown value $OPTARG" && exit 1
                            force_color_mode="$OPTARG" ;;
                        *) echo "Invalid option: $OPTION $OPTARG" ;;
                    esac
                    OPTIND=1 ; shift ;;
                \?) echo "Invalid option: $OPTION $OPTARG" ; usage 1 ;;
            esac
        done
        shift $((OPTIND-1)) ; pos_args+=($1) ; shift
    done
}

function output_balls()
{
    f=3 b=4
    for j in f b; do
      for i in {0..7}; do
        printf -v $j$i %b "\e[${!j}${i}m"
      done
    done
    d=$'\e[1m'
    t=$'\e[0m'
    v=$'\e[7m'

    # Symbol
    s=
    # s=

    cat << EOF

     $f0$s$d$s$t $f1$s$d$s$t $f2$s$d$s$t $f3$s$d$s$t
     $f4$s$d$s$t $f5$s$d$s$t $f6$s$d$s$t $f7$s$d$s$t

EOF
}

function output_blocks()
{
    f=3 b=4
    for j in f b; do
      for i in {0..7}; do
        printf -v $j$i %b "\e[${!j}${i}m"
      done
    done
    d=$'\e[1m'
    t=$'\e[0m'
    v=$'\e[7m'

    cat << EOF

     $f1██████$d██$t $f2██████$d██$t $f3██████$d██$t $f4██████$d██$t $f5██████$d██$t $f6██████$d██$t
     $f1██████$d██$t $f2██████$d██$t $f3██████$d██$t $f4██████$d██$t $f5██████$d██$t $f6██████$d██$t
     $f1██████$d██$t $f2██████$d██$t $f3██████$d██$t $f4██████$d██$t $f5██████$d██$t $f6██████$d██$t
     $ft██████$d$f7██$t $ft██████$d$f7██$t $ft██████$d$f7██$t $ft██████$d$f7██$t $ft██████$d$f7██$t $ft██████$d$f7██$t

EOF
}

function output_panes()
{
    f=3 b=4
    for j in f b; do
      for i in {0..7}; do
        printf -v $j$i %b "\e[${!j}${i}m"
      done
    done
    d=$'\e[1m'
    t=$'\e[0m'
    v=$'\e[7m'

    cat << EOF

     $f0████$d▄$t  $f1████$d▄$t  $f2████$d▄$t  $f3████$d▄$t  $f4████$d▄$t  $f5████$d▄$t  $f6████$d▄$t  $f7████$d▄$t
     $f0████$d█$t  $f1████$d█$t  $f2████$d█$t  $f3████$d█$t  $f4████$d█$t  $f5████$d█$t  $f6████$d█$t  $f7████$d█$t
     $f0████$d█$t  $f1████$d█$t  $f2████$d█$t  $f3████$d█$t  $f4████$d█$t  $f5████$d█$t  $f6████$d█$t  $f7████$d█$t
     $d$f0 ▀▀▀▀  $d$f1 ▀▀▀▀   $f2▀▀▀▀   $f3▀▀▀▀   $f4▀▀▀▀   $f5▀▀▀▀   $f6▀▀▀▀   $f7▀▀▀▀$t

EOF
}

function output_colors()
{
    local fgbg_values=()

    if [ "$forground_only" -eq 1 ]; then
        fgbg_values+=(38)
    elif [ "$background_only" -eq 1 ]; then
        fgbg_values+=(48)
    else
        fgbg_values+=(38 48)
    fi

    [ -z $force_color_mode ] && {
        force_color_mode=$(tput colors)
    }

    for fgbg in ${fgbg_values[@]} ; do # Forground / Background
        # for color in {0..$force_color_mode} ; do
        for ((color=0;color<$force_color_mode;color++)) ; do
            # Display the color
            printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color

            # Display 6 color per line
            [[ $((($color + 1) % 6)) == 4 ]] && echo # New line
        done
        echo # New line
    done
}

function main()
{
    parse_arguments "$@"

    local mode=${pos_args[0]}
    [[ -n $mode ]] && {
        case "$mode" in
            dots|dot|ball|balls) output_balls ; return ;;
            block|blocks) output_blocks ; return ;;
            pane|panes) output_panes ; return ;;
        esac
    }

    output_colors
}

main "$@"

# Format and error code information https://misc.flogisoft.com/bash/tip_colors_and_formatting
