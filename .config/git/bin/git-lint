#!/usr/bin/env bash

# -------------------------------------------------------------------------------------------------
function main()
{
    parse_args "$@"

    new_files=$(git status | grep 'new file:' | awk '{print $3}')
    modified_files=$(git status | grep 'modified:' | awk '{print $2}')

    [[ -z $modified_files ]] && [[ -z $new_files ]] && echo "No new or modified files found"

    for file in ${modified_files[@]} ${new_files[@]} ; do
        base=${file%.*}
        ext=${file#$base.}
        case "$ext" in
            cpp|hpp|inl) lint_cpp        $file $base $ext ;;
            py)          lint_python     $file $base $ext ;;
            ts)          lint_typescript $file $base $ext ;;
            *) continue ;;
        esac
    done
}

# -------------------------------------------------------------------------------------------------
function parse_args() # arguments
{
    positional_args=()
    local optspec=":h"
    while [ $# -gt 0 ] ; do
        unset OPTIND ; unset OPTARG
        while getopts $optspec OPTION ; do
            case "$OPTION" in
                h) usage 0 ;;
                -)
                    [ $OPTIND -ge 1 ] && optind=$(expr $OPTIND - 1) || optind=$OPTIND
                    eval OPTION="\$$optind"
                    OPTARG=$(echo $OPTION | cut -d'=' -f2)
                    OPTION=$(echo $OPTION | cut -d'=' -f1)
                    case $OPTION in
                        --help|--usage) usage 0 ;;
                        *) echo "Invalid option: $OPTION $OPTARG" ;;
                    esac
                    OPTIND=1 ; shift ;;
                \?) echo "Invalid option: $OPTION $OPTARG" ; usage 1 ;;
            esac
        done
        shift $((OPTIND-1)) ; positional_args+=($1) ; shift
    done
}

# -------------------------------------------------------------------------------------------------
function usage() # return_code
{
    cat <<-EOF
Usage: git lint [options]

Options:
  -h, --help, --usage     Show this help message
EOF
    exit $1
}

# -------------------------------------------------------------------------------------------------
function has # (command)
{
    hash "$1" &>/dev/null
}

# -------------------------------------------------------------------------------------------------
# All of the linting file types
# -------------------------------------------------------------------------------------------------

function lint_cpp() # file, base, ext
{
    echo "cpp"
}

function lint_python() # file, base, ext
{
    has pylint && pylint "$file" || echo "Could not find pylint continuing"
}

function lint_typescript() # file, base, ext
{
    echo "typescript"
}

main "$@"
