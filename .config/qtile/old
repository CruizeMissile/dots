#  ██████╗ ████████╗██╗██╗     ███████╗
# ██╔═══██╗╚══██╔══╝██║██║     ██╔════╝
# ██║   ██║   ██║   ██║██║     █████╗
# ██║▄▄ ██║   ██║   ██║██║     ██╔══╝
# ╚██████╔╝   ██║   ██║███████╗███████╗
#  ╚══▀▀═╝    ╚═╝   ╚═╝╚══════╝╚══════╝

from libqtile.config import Key, Screen, Group, Drag, Click
from libqtile.command import lazy
from libqtile import layout, bar, widget

from typing import List  # noqa: F401

mod = "mod4"
alt = "mod1"
shift = "shift"
ctrl = "control"

myTerm = "urxvt"

user = {
    "term": "urxvt"
}

keys = [
    # quit qtile
    Key([mod, ctrl], "q", lazy.shutdown()),

    # restart qtile
    Key([mod, ctrl], "r", lazy.restart()),

    # restart qtile
    Key([mod], "Return", lazy.spawn(user["term"])),

    # restart qtile
    Key([mod], "z", lazy.window.kill()),

    # kill window
    Key([mod], "z", lazy.window.kill()),

    # navigation
    Key([mod], "h", lazy.layout.left()),
    Key([mod], "j", lazy.layout.down()),
    Key([mod], "k", lazy.layout.up()),
    Key([mod], "l", lazy.layout.right()),

    # movement
    Key([mod, shift], "h", lazy.layout.suffle_left(), lazy.layout.swap_left()),
    Key([mod, shift], "j", lazy.layout.suffle_down()),
    Key([mod, shift], "k", lazy.layout.suffle_up()),
    Key([mod, shift], "l", lazy.layout.suffle_right(), lazy.layout.swap_right()),

    # suffling
    Key([mod, ctrl, shift], "h", lazy.layout.flip_left()),
    Key([mod, ctrl, shift], "j", lazy.layout.flip_down()),
    Key([mod, ctrl, shift], "k", lazy.layout.flip_up()),
    Key([mod, ctrl, shift], "l", lazy.layout.flip_right()),

    # resizeing
    Key([mod, ctrl], "h", lazy.layout.grow_left(), lazy.layout.shrink_main()),
    Key([mod, ctrl], "j", lazy.layout.grow_down(), lazy.layout.shrink()),
    Key([mod, ctrl], "k", lazy.layout.grow_up(), lazy.layout.grow()),
    Key([mod, ctrl], "l", lazy.layout.grow_right(), lazy.layout.grow_main()),
]

# keys = [
#     # Switch between windows in current stack pane
#     Key([mod], "k", lazy.layout.down()),
#     Key([mod], "j", lazy.layout.up()),

#     # Move windows up or down in current stack
#     Key([mod, "control"], "k", lazy.layout.shuffle_down()),
#     Key([mod, "control"], "j", lazy.layout.shuffle_up()),

#     # Switch window focus to other pane(s) of stack
#     Key([mod], "space", lazy.layout.next()),

#     # Swap panes of split stack
#     Key([mod, "shift"], "space", lazy.layout.rotate()),

#     # Toggle between split and unsplit sides of stack.
#     # Split = all windows displayed
#     # Unsplit = 1 window displayed, like Max layout, but still with
#     # multiple stack panes
#     Key([mod, "shift"], "Return", lazy.layout.toggle_split()),
#     Key([mod], "Return", lazy.spawn(myTerm)),

#     # Toggle between different layouts as defined below
#     Key([mod], "Tab", lazy.next_layout()),
#     Key([mod], "w", lazy.window.kill()),

#     Key([mod, "control"], "r", lazy.restart()),
#     Key([mod, "control"], "q", lazy.shutdown()),
#     Key([mod], "r", lazy.spawncmd()),
# ]

group_spawns = [None, None, None, None, None, None, None, None]
group_matches = [None, None, None, None, None, None, None, None]
group_labels = [None, None, None, None, None, None, None, None]
group_names = list("12345678")

groups = [
    Group(name = group_name, label = group_label, spawn = group_spawn, matches = group_matches)
    for group_name, group_label, group_spawn, group_match in zip(
        group_names, group_labels, group_spawns, group_matches
    )
]

for i in groups:
    keys.extend(
        [
            # mod1 + group = switch to group
            Key([mod], i.name, lazy.group[i.name].toscreen()),

            # mod1 + shift + group = switch to & move focused window to group
            Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
        ]
    )

layouts = [
    layout.xmonad.MonadTall(),
    layout.matrix.Matrix(),
    layout.max.Max(),
    layout.zoomy.Zoomy()
    # layout.Max(),
    # layout.xmonad.MonadTall(ratio=0.5),
    # layout.Tile(ratio=0.5, masterWindows=2),
    # layout.TreeTab(),
    # layout.zoomy.Zommy()
    # layout.Stack(num_stacks=2)
]

widget_defaults = dict(
    font='sans',
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.TextBox("default config", name="default"),
                widget.Systray(),
                widget.Clock(format='%Y-%m-%d %a %I:%M %p'),
            ],
            24,
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    {'wmclass': 'confirm'},
    {'wmclass': 'dialog'},
    {'wmclass': 'download'},
    {'wmclass': 'error'},
    {'wmclass': 'file_progress'},
    {'wmclass': 'notification'},
    {'wmclass': 'splash'},
    {'wmclass': 'toolbar'},
    {'wmclass': 'confirmreset'},  # gitk
    {'wmclass': 'makebranch'},  # gitk
    {'wmclass': 'maketag'},  # gitk
    {'wname': 'branchdialog'},  # gitk
    {'wname': 'pinentry'},  # GPG key password entry
    {'wmclass': 'ssh-askpass'},  # ssh-askpass
])
auto_fullscreen = True
focus_on_window_activation = "smart"

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
