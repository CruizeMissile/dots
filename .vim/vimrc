" ------------------------------------------------------------------------------
"      .____            ____.         .__
"      |   _|   ____   |_   | ___  __ |__|   _____   _______    ____
"      |  |    /    \    |  | \  \/ / |  |  /     \  \_  __ \ _/ ___\
"      |  |   |   |  \   |  |  \   /  |  | |  Y Y  \  |  | \/ \  \___
"      |  |_  |___|  /  _|  |   \_/   |__| |__|_|  /  |__|     \___  >
"      |____|      \/  |____|                    \/                \/
"
" This is the personal vimrc and neovimrc file of James Simpson. This file is
" my own personal config for vim and neovim. I have customized my vimrc file
" to suite my own personal preferences. I have taken bits and pieces from other
" vimrc files that I have come accross and added feature that I found useful.
"
" ------------------------------------------------------------------------------

" Plugin setup  ---------------------------------------------------------------- {{{

" check to see if this is neovim or vim. set the default paths for the correct
" version and then setup vim-plug
  let root_dotfile_dir = has("nvim") ? expand("$HOME/.config/nvim") : expand("$HOME/.vim")

" check if plug.vim is in the autoload folder. if not then make the mkdir
" and download plug.vim into the autoload folder. you can now just call
" :PlugInstall to install all of your plugins and you are all setup.
"
" NOTE: if you are using neovim make sure you install neovim package from pip
" make sure you run 'pip3 install neovim' and then :UpdateRemotePlugins
  if (!filereadable(expand(root_dotfile_dir."/autoload/plug.vim")))
    let mkdir_command = &term=="win32" ? "mkdir " : "mkdir -p "
    call system(expand(mkdir_command.root_dotfile_dir."/autoload"))
    call system(expand("curl -o ".root_dotfile_dir."/autoload/plug.vim")." https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim")
  endif

  if &compatible
    set nocompatible
  endif

" if on windows have to add ~/.config/nvim || ~/.vim to the runtime path
  if (has("win32") || has("win64"))
    if has("nvim")
      set runtimepath+=$HOME/.config/nvim
    else
      set runtimepath+=$HOME/.vim
    endif
  endif
  call plug#begin(expand(root_dotfile_dir."/plugged"))

  Plug 'junegunn/vim-easy-align'
  Plug 'Yggdroot/indentLine'
  Plug 'chrisbra/vim-diff-enhanced'
  Plug 'duggiefresh/vim-easydir'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'glts/vim-textobj-comment'
  Plug 'jiangmiao/auto-pairs'
  Plug 'kana/vim-textobj-user'
  Plug 'kien/ctrlp.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'shime/vim-livedown'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'tommcdo/vim-exchange'
  Plug 'tommcdo/vim-lion'
  Plug 'tpope/tpope-vim-abolish'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'wincent/replay'
  Plug 'wincent/scalpel'
  Plug 'xuyuanp/nerdtree-git-plugin'

" easy-motion
  Plug 'easymotion/vim-easymotion'
  Plug 'haya14busa/incsearch.vim'
  Plug 'haya14busa/incsearch-easymotion.vim'

  Plug 'tpope/vim-markdown', {'for': 'markdown'}
  Plug 'tmhedberg/SimpylFold', {'for': 'python'}
  Plug 'christoomey/vim-tmux-navigator'

" completion {{{
  if (has("nvim"))
    Plug 'Shougo/deoplete.nvim'
    Plug 'davidhalter/jedi-vim', {'for': 'python'}
    Plug 'zchee/deoplete-jedi', {'for': 'python'}
    Plug 'carlitux/deoplete-ternjs', {'for': 'javascript'}
    Plug 'Shougo/neco-vim'
    Plug 'Shougo/vimfiler.vim'
    Plug 'Shougo/unite.vim'
  else
    if (has("lua"))
      Plug 'Shougo/neocomplete.vim'
      Plug 'Shougo/vimshell.vim'
      Plug 'Shougo/neco-vim'
      Plug 'davidhalter/jedi-vim', {'for': 'python'}
    endif
  endif " }}}

" themes
  Plug 'CruizeMissile/Revolution.vim'
  Plug 'mhartington/oceanic-next'
  Plug 'rhysd/vim-color-spring-night'
  Plug 'raphamorim/lucario'
  Plug 'KeitaNakamura/neodark.vim'

  call plug#end()

" }}}
" System settings  ------------------------------------------------------------- {{{

  if (!empty(glob('~/.local.vim')))
    source ~/.local.vim
  endif

" vim will source an external rc file if it exists in the working directory.
" can store project specific configuration there. since exrc is set makeing
" sure that it is secure
  set exrc
  set secure

" neovim settings
  if has("nvim")
    if (has("termguicolors"))
      set termguicolors
    endif
    set clipboard+=unnamedplus
  else
    set clipboard+=unnamed
  endif

" currently needed for neovim paste issue
  autocmd BufWritePre * %s/\s\+$//e

" want to get the indent to the filetype
  filetype plugin indent on
  filetype on

" basic settings
  set encoding=utf8
  set fileencoding=utf8
  set showmode
  set showcmd
  set hidden
  set splitbelow
  set splitright
  set ruler
  set number
  set linebreak
  set scrolloff=5
  set title
  set ttyfast
  set nospell
  set lazyredraw
  set matchtime=3
  set backspace=indent,eol,start
  set statusline=-4m%f\ %y\ \ %=%{&ff}\ \|\ %{&fenc}\ [%l:%c]
  set gdefault

" Make the visual bell zero time, so it doesn't blink.
  autocmd VimEnter * set vb t_vb=
  set noerrorbells " beeping causes an increase in the urge to kill
  set visualbell   " but saying 'noerrorbell' doesn't do it all all

" defualt tabs
  set autoindent
  set smartindent
  set tabstop=4
  set shiftwidth=4
  set softtabstop=4

"  characters
  set list
  set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮

" searching
  set ignorecase
  set smartcase
  set incsearch
  set showmatch
  set hlsearch
  set gdefault
  set virtualedit+=block

" basic completion
  set complete=.,w,b,u,t
  set completeopt=longest,menuone,preview

" resize splits when the window is resized
  au VimResized * :wincmd =

" settings vim to auto reload changes to files. check the file every 4 seconds
  set autoread
  au CursorHold * checktime

" setting the leader key
  let mapleader=","
  let maplocalleader="\\"

" indent characters
  let g:indentline_char='|'
  let g:table_mode_corner='|'

" backups
  set nobackup
  set noswapfile
  set nowritebackup

" title
  set title
  set titleold=

" make sure vim returns to the same line when you reopen a file.
  augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
  augroup end

" }}}
" Mappings   ------------------------------------------------------------------- {{{

" these will change your life
  nnoremap ; :
  inoremap jj <esc>

" no need for ex mode
  nnoremap Q <nop>

" quick edit rc file
  map <f3> :e $MYVIMRC<cr>
  map <leader><f3> :source $MYVIMRC<cr>

" movement keys
  noremap H ^
  noremap L g_
  noremap J 5gj
  noremap K 5gk
  noremap j gj
  noremap k gk

" easy buffer navigation
  nnoremap <c-h> <c-w>h
  nnoremap <c-j> <c-w>j
  nnoremap <c-k> <c-w>k
  nnoremap <c-l> <c-w>l

" mappings to jump me to the beginning of functions
  noremap [[ ?{<cr>w99[{
  noremap ][ /}<cr>b99]}
  noremap ]] j0[[%/{<cr>
  noremap [] k$][%?}<cr>

" normal mode quickly insert a line above or below
  nnoremap <c-down> mzo<esc>`z
  nnoremap <c-up> mzO<esc>`z

" paste on the line above and below
  nnoremap <leader>p o<esc>p
  nnoremap <leader>P O<esc>p

" switch cmd to the directory of the open buffer
  noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" insert mode maps
  inoremap <c-z> <esc>ua
  inoremap <c-x> <esc>ddi
  inoremap <c-c> <esc>yyi
  inoremap <c-v> <esc>pi
  inoremap <c-s> <esc>:w<cr>a
  inoremap <c-a> <esc>ggvG$
  inoremap <c-\> <esc>$a;<esc>o

" make ctrl + backspace to what it should be
  inoremap <c-bs> <c-w>
  inoremap <m-bs> <c-w>
  inoremap <c-del> <c-o>dw

" align blocks of text and keep them selected
  vmap < <gv
  vmap > >gv

" center search
  nmap n nzz
  nmap N nzz

" using sane regex
  nnoremap <c-/> /\v
  vnoremap <c-/> /\v

" clean trailing
  nnoremap <silent><leader>ww mz:%s/\s\+$//<cr>:let @/=''<cr>`z
  nnoremap <silent><leader>wl :set list!<cr>

" clean end lines from file
  nnoremap <silent><leader>wm :%s/\r$//<cr>

" remove highlighting for search
  nnoremap <silent>\<cr> :nohl<cr>

" toggle character list
  nnoremap <leader>l :set list!<cr>

" zt is okay for putting something at the top of the screen, but when i'm
" writing prose i often want to put something at not-quite-the-top of the
" screen.  zh is "zoom to head level"
  nnoremap zh mzzt10<c-u>`z

" reselect visual block after indent/outdent
  vnoremap < <gv
  vnoremap > >gv

" }}}
" Gui | Terminal & Themes   ---------------------------------------------------- {{{

  if has("gui")
    set guifont=Fira\ Mono\ for\ Powerline:h10:cANSI,Inconsolata:h11:cANSI,Monaco:h10:cANSI,Consolas:h11:cANSI,Terminal:h11:cOEM
    au GUIEnter * simalt ~x " open maximized
    set guioptions-=T  " remove the toolbar
    set guioptions-=m  " remove the menubar
    set guioptions-=r  " remove the right scroll bar
    set guioptions-=l  " remove the left scroll bar
  else
    let g:neodark#use_custom_terminal_theme = &t_Co<=16
  endif
  let g:neodark#background = '#202020'
  let g:neodark#use_256color = &t_Co==256

  set mouse=a             " automatically enable mouse usage
  set mousehide           " hide the mouse cursor while typing
  set virtualedit=onemore " allow the cursor beyond last cursor

  syntax on
  try
    colorscheme neodark
  catch
    colorscheme default
  endtry

"  }}}
" Folds   ---------------------------------------------------------------------- {{{

  function! FoldText() " {{{
    let line = getline(v:foldstart)
    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')
    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
  endfunction " }}}

  set foldtext=FoldText()
  autocmd insertenter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
  autocmd insertleave,winleave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" autocmd filetype vim setlocal fdc=1
  set foldlevel=99
  nnoremap <space> za
  vnoremap <space> za

" make zO recursively open whatever fold we're in, even if it's partially open.
  nnoremap zO zczO

" focus the current line. will close all folds and open folds for the line.
  nnoremap zx mzzMzvzz15<c-e>`z

  let g:xml_syntax_folding = 1

  autocmd filetype css,scss,json setlocal foldmethod=marker
  autocmd filetype css,scss,json setlocal foldmarker={,}

" }}}
" Diffs   ---------------------------------------------------------------------- {{{

" disable one diff window during a three-way diff allowing you to cut out the
" noise of a three-way diff and focus on just the changes between two versions
" at a time. inspired by Steve Losh's Splice
  function! DiffToggle(window)
    " save the cursor position and turn on diff for all windows
    let l:save_cursor = getpos('.')
    windo :diffthis
    " turn off diff for the specified window (but keep scrollbind) and move
    " the cursor to the left-most diff window
    exe a:window . "wincmd w"
    diffoff
    set scrollbind
    set cursorbind
    exe a:window . "wincmd " . (a:window == 1 ? "l" : "h")
    " update the diff and restore the cursor position
    diffupdate
    call setpos('.', l:save_cursor)
  endfunction

  function! DiffTog()
    if &diff
      diffoff
    else
      diffthis
    endif
  endfunction

" toggle diff view on the left, center, or right windows
  nmap <silent> <leader>dtl :call DiffToggle(1)<cr>
  nmap <silent> <leader>dtc :call DiffToggle(2)<cr>
  nmap <silent> <leader>dtr :call DiffToggle(3)<cr>
  nmap <silent> <leader>df :call DiffTog()<cr>

" get the diff for the left, center, or right
  nmap <silent> <leader>dl :diffget LOCAL
  nmap <silent> <leader>dc :diffget BASE
  nmap <silent> <leader>dr :diffget REMOTE

  ab <silent> dt call DiffTog()<cr>
  ab <silent> dg diffget
  ab <silent> dp diffput

" }}}
" Trailing    ------------------------------------------------------------------ {{{

  augroup trailing
    au!
    au BufWinEnter * match Error /\s\+%#@<!$/
    au InsertEnter * match Error /\s\+%#@<!$/
    au InsertLeave * match Error /\s\+$/
  augroup END

" Make sure Vim returns to the same line when you reopen a file.
  augroup line_return
    au!
    au BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \     execute 'normal! g`"zvzz' |
      \ endif
  augroup END

" }}}
" File Types   ----------------------------------------------------------------- {{{

" bash
  augroup ft_bash
    au!
    au filetype bash setlocal ts=4 sts=4 sw=4 et
  augroup end

" c & c++
  augroup ft_c
    au!
    au filetype c,cpp setlocal foldmethod=marker foldmarker={,}
    au filetype c,cpp setlocal softtabstop=4 shiftwidth=4 tabstop=4 expandtab
    au filetype c,cpp setlocal colorcolumn=100 textwidth=100
    au filetype c,cpp setlocal commentstring=//\ %s
  augroup end

" c#
  augroup ft_cs
    au!
    au filetype cs setlocal foldmethod=marker foldmarker={,}
    au filetype cs setlocal softtabstop=4 shiftwidth=4 tabstop=4 expandtab
    au filetype cs setlocal colorcolumn=100 textwidth=100
    au filetype cs setlocal commentstring=//\ %s
  augroup end

" cmake
  augroup ft_cmake
    au!
    au filetype cmake setlocal commentstring=#\ %s
    au filetype cmake setlocal sts=4 sw=4 ts=4 et
  augroup end

" gitconfig
  augroup ft_git
    au!
    au filetype gitconfig setlocal ts=4 sw=4 sts=4 et
  augroup end

" html
  augroup ft_html
    au!
    au filetype html setlocal softtabstop=2 shiftwidth=2 fdl=99 foldmethod=expr
    au filetype html setlocal foldexpr=htmlfolds()
  augroup end

" javascript
  augroup ft_javascript
    au!
    au filetype javascript setlocal foldmethod=marker foldmarker={,}
    au filetype javascript setlocal tabstop=2 shiftwidth=2
  augroup end

" python
  augroup ft_python
    au!
    au bufwinenter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
    au bufwinleave *.py setlocal foldexpr< foldmethod<
    au filetype python setlocal define=^\s*\\(def\\\\|class\\)
    au filetype python iabbrev <buffer> afo assert False, "Okay"
    au filetype python noremap <F5> <ESC>:w<CR>:silent execute "!python %"<CR><CR>
    au filetype python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
  augroup end

" sh
  augroup ft_sh
    au!
    au filetype sh setlocal ts=4 sts=4 sw=4 et
  augroup end

" vimscript and config
  augroup ft_vim
    au!
    au filetype vim setlocal foldmethod=marker
    au filetype vim setlocal foldlevel=0 fdc=1
    au filetype vim setlocal sw=2 sts=2 ts=2 et
    au bufwritepost $MYVIMRC source $MYVIMRC
    au bufwritepost $MYVIMRC setlocal filetype=vim
  augroup end

" xml
  augroup ft_xml
    au!
    au filetype xml setlocal foldmethod=syntax
  augroup end

" yaml
  augroup ft_yaml
    au!
    au filetype yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  augroup end

" zsh
  augroup ft_zsh
    au!
    au filetype zsh setlocal ts=4 sts=4 sw=4 et
  augroup end

" }}}
" Indent Guides   -------------------------------------------------------------- {{{

  let g:indentguides_state = 0
  function! IndentGuides() " {{{
    if g:indentguides_state
      let g:indentguides_state = 0
      2match None
    else
      let g:indentguides_state = 1
      execute '2match IndentGuides /\%(\_^\s*\)\@<=\%(\%'.(0*&sw+1).'v\|\%'.(1*&sw+1).'v\|\%'.(2*&sw+1).'v\|\%'.(3*&sw+1).'v\|\%'.(4*&sw+1).'v\|\%'.(5*&sw+1).'v\|\%'.(6*&sw+1).'v\|\%'.(7*&sw+1).'v\)\s/'
    endif
  endfunction " }}}
  hi def IndentGuides guibg=#303030 ctermbg=234
  nnoremap <leader>I :call IndentGuides()<cr>

" }}}
" Plugin Settings   ------------------------------------------------------------ {{{
" ctrl-p {{{

let g:ctrlp_show_hidden = 1
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" }}}
" easy-motion {{{

" You can use other keymappings like <C-l> instead of <CR> if you want to
" use these mappings as default search and somtimes want to move cursor with
" EasyMotion.
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

" noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

" }}}
" NERDTree {{{

  nnoremap <F2> :NERDTreeToggle<cr>
  let NERDTreeIgnore = ['\.pyc$', '\.git$[[dir]]', 'node_modules$[[dir]]']
  let loaded_netrwPlugin=1
  let NERDTreeShowHidden=1
  let NERDTreeRespectWildIgnore=1

" close vim if the only window open is NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" }}}
" Deoplete {{{

  if has("nvim")
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_smart_case = 1
  endif

" }}}
" Neocomplete {{{

  if !has("nvim") && has("lua")
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
  endif

" }}}
" Jsx {{{

  let g:jsx_ext_required = 0

" }}}
" Livedown {{{
let g:livedown_open = 1
" }}}
" vim-align {{{
"
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" }}}
" }}}
" HexHighlight   --------------------------------------------------------------- {{{

let s:HexColored = 0
let s:HexColors = []

map <Leader><F2> :call HexHighlight()<Return>
function! HexHighlight()
  if has("gui_running")
    if s:HexColored == 0
      let hexGroup = 4
      let lineNumber = 0
      while lineNumber <= line("$")
        let currentLine = getline(lineNumber)
        let hexLineMatch = 1
        while match(currentLine, '#\x\{6}', 0, hexLineMatch) != -1
          let hexMatch = matchstr(currentLine, '#\x\{6}', 0, hexLineMatch)
          exe 'hi hexColor'.hexGroup.' guifg='.hexMatch.' guibg='.hexMatch
          exe 'let m = matchadd("hexColor'.hexGroup.'", "'.hexMatch.'", 25, '.hexGroup.')'
          let s:HexColors += ['hexColor'.hexGroup]
          let hexGroup += 1
          let hexLineMatch += 1
        endwhile
        let lineNumber += 1
      endwhile
      unlet lineNumber hexGroup
      let s:HexColored = 1
      echo "Highlighting hex colors..."
    elseif s:HexColored == 1
      for hexColor in s:HexColors
        exe 'highlight clear '.hexColor
      endfor
      call clearmatches()
      let s:HexColored = 0
      echo "Unhighlighting hex colors..."
    endif
  else
    echo "hexHighlight only works with a graphical version of vim"
  endif
endfunction

" }}}
" Source local vimrc file   ---------------------------------------------------- {{{

  if (!empty(glob('~/.dotfiles-local/vimrc.local')))
    source ~/.dotfiles-local/vimrc.local
  endif

" }}}
